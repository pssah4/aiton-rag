"""
AITON-RAG Desktop UI

Tkinter-based desktop interface for file upload and system monitoring.
Provides an alternative to the web interface for local file management.
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import requests
import json
from pathlib import Path
import time
from datetime import datetime
import webbrowser

from config import Config

class AITONRAGDesktopUI:
    """Desktop UI for AITON-RAG using Tkinter."""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AITON-RAG Desktop Interface")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        
        # Configuration
        self.api_base_url = Config.API_BASE_URL
        self.upload_dir = Config.UPLOAD_DIR
        
        # Variables
        self.status_var = tk.StringVar(value="Ready")
        self.progress_var = tk.DoubleVar()
        self.files_var = tk.StringVar(value="0")
        self.categories_var = tk.StringVar(value="0")
        
        # Create UI
        self.create_ui()
        
        # Start status updates
        self.update_status()
        
    def create_ui(self):
        """Create the main UI components."""
        
        # Style configuration
        style = ttk.Style()
        style.theme_use('clam')
        
        # Main container
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # Title
        title_label = ttk.Label(main_frame, text="AITON-RAG Desktop Interface", 
                               font=("Helvetica", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))\n        \n        # Status Frame\n        status_frame = ttk.LabelFrame(main_frame, text=\"System Status\", padding=\"10\")\n        status_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))\n        status_frame.columnconfigure(1, weight=1)\n        \n        # Status indicators\n        ttk.Label(status_frame, text=\"Status:\").grid(row=0, column=0, sticky=tk.W)\n        status_label = ttk.Label(status_frame, textvariable=self.status_var)\n        status_label.grid(row=0, column=1, sticky=tk.W, padx=(10, 0))\n        \n        ttk.Label(status_frame, text=\"Processed Files:\").grid(row=1, column=0, sticky=tk.W)\n        files_label = ttk.Label(status_frame, textvariable=self.files_var)\n        files_label.grid(row=1, column=1, sticky=tk.W, padx=(10, 0))\n        \n        ttk.Label(status_frame, text=\"Categories:\").grid(row=2, column=0, sticky=tk.W)\n        categories_label = ttk.Label(status_frame, textvariable=self.categories_var)\n        categories_label.grid(row=2, column=1, sticky=tk.W, padx=(10, 0))\n        \n        # File Upload Frame\n        upload_frame = ttk.LabelFrame(main_frame, text=\"File Upload\", padding=\"10\")\n        upload_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))\n        upload_frame.columnconfigure(1, weight=1)\n        \n        # File selection\n        self.file_path_var = tk.StringVar()\n        ttk.Label(upload_frame, text=\"Selected File:\").grid(row=0, column=0, sticky=tk.W)\n        file_entry = ttk.Entry(upload_frame, textvariable=self.file_path_var, state=\"readonly\")\n        file_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 10))\n        \n        browse_button = ttk.Button(upload_frame, text=\"Browse\", command=self.browse_file)\n        browse_button.grid(row=0, column=2)\n        \n        # Upload button\n        self.upload_button = ttk.Button(upload_frame, text=\"Upload & Process\", \n                                       command=self.upload_file)\n        self.upload_button.grid(row=1, column=0, columnspan=3, pady=(10, 0))\n        \n        # Progress bar\n        self.progress_bar = ttk.Progressbar(upload_frame, variable=self.progress_var, \n                                           maximum=100)\n        self.progress_bar.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), \n                              pady=(10, 0))\n        \n        # API Testing Frame\n        api_frame = ttk.LabelFrame(main_frame, text=\"API Testing\", padding=\"10\")\n        api_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))\n        api_frame.columnconfigure(1, weight=1)\n        \n        # Search functionality\n        ttk.Label(api_frame, text=\"Search Query:\").grid(row=0, column=0, sticky=tk.W)\n        self.search_var = tk.StringVar()\n        search_entry = ttk.Entry(api_frame, textvariable=self.search_var)\n        search_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 10))\n        search_entry.bind('<Return>', lambda e: self.search_knowledge())\n        \n        search_button = ttk.Button(api_frame, text=\"Search\", command=self.search_knowledge)\n        search_button.grid(row=0, column=2)\n        \n        # Category filter\n        ttk.Label(api_frame, text=\"Category:\").grid(row=1, column=0, sticky=tk.W)\n        self.category_var = tk.StringVar()\n        category_combo = ttk.Combobox(api_frame, textvariable=self.category_var,\n                                     values=[\"\", \"processes\", \"definitions\", \"analysis\", \"reference\"],\n                                     state=\"readonly\")\n        category_combo.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 10), pady=(5, 0))\n        category_combo.set(\"\")  # Default to no filter\n        \n        # API action buttons\n        button_frame = ttk.Frame(api_frame)\n        button_frame.grid(row=2, column=0, columnspan=3, pady=(10, 0))\n        \n        ttk.Button(button_frame, text=\"Get Knowledge Base\", \n                  command=self.get_knowledge_base).pack(side=tk.LEFT, padx=(0, 5))\n        ttk.Button(button_frame, text=\"Health Check\", \n                  command=self.health_check).pack(side=tk.LEFT, padx=(0, 5))\n        ttk.Button(button_frame, text=\"Update KB\", \n                  command=self.update_knowledge_base).pack(side=tk.LEFT, padx=(0, 5))\n        ttk.Button(button_frame, text=\"Open Web UI\", \n                  command=self.open_web_ui).pack(side=tk.LEFT)\n        \n        # Results Frame\n        results_frame = ttk.LabelFrame(main_frame, text=\"Results\", padding=\"10\")\n        results_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), \n                          pady=(0, 10))\n        results_frame.columnconfigure(0, weight=1)\n        results_frame.rowconfigure(0, weight=1)\n        \n        # Results text area\n        self.results_text = scrolledtext.ScrolledText(results_frame, height=15, width=80)\n        self.results_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n        \n        # Configure grid weights for main frame\n        main_frame.rowconfigure(4, weight=1)\n        \n    def browse_file(self):\n        \"\"\"Open file browser to select a file.\"\"\"\n        filetypes = [\n            ('All Supported', '*.pdf;*.docx;*.txt;*.html;*.md;*.htm'),\n            ('PDF files', '*.pdf'),\n            ('Word documents', '*.docx'),\n            ('Text files', '*.txt'),\n            ('HTML files', '*.html;*.htm'),\n            ('Markdown files', '*.md'),\n            ('All files', '*.*')\n        ]\n        \n        filename = filedialog.askopenfilename(\n            title=\"Select file to upload\",\n            filetypes=filetypes\n        )\n        \n        if filename:\n            self.file_path_var.set(filename)\n    \n    def upload_file(self):\n        \"\"\"Upload the selected file.\"\"\"\n        file_path = self.file_path_var.get()\n        if not file_path:\n            messagebox.showwarning(\"No File Selected\", \"Please select a file to upload.\")\n            return\n        \n        # Validate file\n        path = Path(file_path)\n        if not path.exists():\n            messagebox.showerror(\"File Not Found\", \"The selected file does not exist.\")\n            return\n        \n        # Check file extension\n        allowed_extensions = {'.pdf', '.docx', '.txt', '.html', '.md', '.htm'}\n        if path.suffix.lower() not in allowed_extensions:\n            messagebox.showerror(\"Unsupported File\", \n                               f\"File type {path.suffix} is not supported.\\n\"\n                               f\"Supported types: {', '.join(allowed_extensions)}\")\n            return\n        \n        # Start upload in thread\n        self.upload_button.config(state=\"disabled\")\n        self.progress_var.set(0)\n        \n        thread = threading.Thread(target=self._upload_file_thread, args=(file_path,))\n        thread.daemon = True\n        thread.start()\n    \n    def _upload_file_thread(self, file_path):\n        \"\"\"Upload file in a separate thread.\"\"\"\n        try:\n            self.progress_var.set(25)\n            \n            with open(file_path, 'rb') as f:\n                files = {'file': f}\n                response = requests.post(\n                    f\"{self.api_base_url}/api/upload\",\n                    files=files,\n                    timeout=60\n                )\n            \n            self.progress_var.set(75)\n            \n            if response.status_code == 200:\n                data = response.json()\n                if data.get('success'):\n                    self.progress_var.set(100)\n                    self.log_result(f\"✓ Upload successful: {data.get('filename')}\")\n                    self.file_path_var.set(\"\")  # Clear selection\n                    self.update_status()  # Refresh stats\n                else:\n                    self.log_result(f\"✗ Upload failed: {data.get('error')}\")\n            else:\n                self.log_result(f\"✗ Upload failed: HTTP {response.status_code}\")\n                \n        except Exception as e:\n            self.log_result(f\"✗ Upload error: {str(e)}\")\n        finally:\n            self.root.after(0, lambda: self.upload_button.config(state=\"normal\"))\n            self.root.after(2000, lambda: self.progress_var.set(0))\n    \n    def search_knowledge(self):\n        \"\"\"Search the knowledge base.\"\"\"\n        query = self.search_var.get().strip()\n        if not query:\n            messagebox.showwarning(\"No Query\", \"Please enter a search query.\")\n            return\n        \n        category = self.category_var.get()\n        \n        thread = threading.Thread(target=self._search_thread, args=(query, category))\n        thread.daemon = True\n        thread.start()\n    \n    def _search_thread(self, query, category):\n        \"\"\"Search in a separate thread.\"\"\"\n        try:\n            params = {'query': query}\n            if category:\n                params['category'] = category\n            \n            response = requests.get(\n                f\"{self.api_base_url}/api/v1/search\",\n                params=params,\n                timeout=30\n            )\n            \n            if response.status_code == 200:\n                data = response.json()\n                if data.get('success'):\n                    results = data.get('results', [])\n                    self.log_result(f\"Search Results for '{query}' ({len(results)} found):\")\n                    \n                    for i, result in enumerate(results[:10], 1):\n                        self.log_result(f\"\\n{i}. {result.get('title', 'Untitled')}\")\n                        self.log_result(f\"   Category: {result.get('category', 'Unknown')}\")\n                        self.log_result(f\"   Source: {result.get('source_file', 'Unknown')}\")\n                        content = result.get('content', '')[:200]\n                        self.log_result(f\"   Content: {content}{'...' if len(result.get('content', '')) > 200 else ''}\")\n                else:\n                    self.log_result(f\"Search failed: {data.get('error')}\")\n            else:\n                self.log_result(f\"Search failed: HTTP {response.status_code}\")\n                \n        except Exception as e:\n            self.log_result(f\"Search error: {str(e)}\")\n    \n    def get_knowledge_base(self):\n        \"\"\"Get the complete knowledge base.\"\"\"\n        thread = threading.Thread(target=self._get_knowledge_base_thread)\n        thread.daemon = True\n        thread.start()\n    \n    def _get_knowledge_base_thread(self):\n        \"\"\"Get knowledge base in a separate thread.\"\"\"\n        try:\n            response = requests.get(\n                f\"{self.api_base_url}/api/v1/knowledge-base\",\n                timeout=30\n            )\n            \n            if response.status_code == 200:\n                data = response.json()\n                if data.get('success'):\n                    kb = data.get('knowledge_base', {})\n                    self.log_result(\"Knowledge Base Overview:\")\n                    \n                    for category, items in kb.items():\n                        self.log_result(f\"\\n{category.upper()}: {len(items)} items\")\n                        for item in items[:3]:  # Show first 3 items\n                            title = item.get('title', 'Untitled')\n                            self.log_result(f\"  • {title}\")\n                        if len(items) > 3:\n                            self.log_result(f\"  ... and {len(items) - 3} more\")\n                else:\n                    self.log_result(f\"Failed to get knowledge base: {data.get('error')}\")\n            else:\n                self.log_result(f\"Failed to get knowledge base: HTTP {response.status_code}\")\n                \n        except Exception as e:\n            self.log_result(f\"Knowledge base error: {str(e)}\")\n    \n    def health_check(self):\n        \"\"\"Perform a health check.\"\"\"\n        thread = threading.Thread(target=self._health_check_thread)\n        thread.daemon = True\n        thread.start()\n    \n    def _health_check_thread(self):\n        \"\"\"Health check in a separate thread.\"\"\"\n        try:\n            response = requests.get(\n                f\"{self.api_base_url}/api/v1/health\",\n                timeout=10\n            )\n            \n            if response.status_code == 200:\n                data = response.json()\n                if data.get('success'):\n                    stats = data.get('stats', {})\n                    status = data.get('status', 'unknown')\n                    \n                    self.log_result(f\"Health Check - Status: {status}\")\n                    self.log_result(f\"  Files: {stats.get('total_processed_files', 0)}\")\n                    self.log_result(f\"  Categories: {stats.get('knowledge_base_categories', 0)}\")\n                    self.log_result(f\"  OpenAI: {'✓' if stats.get('openai_configured') else '✗'}\")\n                else:\n                    self.log_result(f\"Health check failed: {data.get('error')}\")\n            else:\n                self.log_result(f\"Health check failed: HTTP {response.status_code}\")\n                \n        except Exception as e:\n            self.log_result(f\"Health check error: {str(e)}\")\n    \n    def update_knowledge_base(self):\n        \"\"\"Update the knowledge base.\"\"\"\n        thread = threading.Thread(target=self._update_kb_thread)\n        thread.daemon = True\n        thread.start()\n    \n    def _update_kb_thread(self):\n        \"\"\"Update knowledge base in a separate thread.\"\"\"\n        try:\n            response = requests.post(\n                f\"{self.api_base_url}/api/v1/update-knowledge-base\",\n                timeout=60\n            )\n            \n            if response.status_code == 200:\n                data = response.json()\n                if data.get('success'):\n                    self.log_result(\"✓ Knowledge base updated successfully\")\n                    self.update_status()  # Refresh stats\n                else:\n                    self.log_result(f\"Update failed: {data.get('error')}\")\n            else:\n                self.log_result(f\"Update failed: HTTP {response.status_code}\")\n                \n        except Exception as e:\n            self.log_result(f\"Update error: {str(e)}\")\n    \n    def open_web_ui(self):\n        \"\"\"Open the web UI in the default browser.\"\"\"\n        webbrowser.open(self.api_base_url)\n    \n    def update_status(self):\n        \"\"\"Update status information.\"\"\"\n        def _update():\n            try:\n                response = requests.get(\n                    f\"{self.api_base_url}/api/v1/health\",\n                    timeout=5\n                )\n                \n                if response.status_code == 200:\n                    data = response.json()\n                    if data.get('success'):\n                        stats = data.get('stats', {})\n                        self.status_var.set(data.get('status', 'unknown'))\n                        self.files_var.set(str(stats.get('total_processed_files', 0)))\n                        self.categories_var.set(str(stats.get('knowledge_base_categories', 0)))\n                    else:\n                        self.status_var.set(\"Error\")\n                else:\n                    self.status_var.set(\"Disconnected\")\n                    \n            except Exception:\n                self.status_var.set(\"Disconnected\")\n            \n            # Schedule next update\n            self.root.after(10000, self.update_status)  # Update every 10 seconds\n        \n        thread = threading.Thread(target=_update)\n        thread.daemon = True\n        thread.start()\n    \n    def log_result(self, message):\n        \"\"\"Log a message to the results area.\"\"\"\n        timestamp = datetime.now().strftime(\"%H:%M:%S\")\n        \n        def _log():\n            self.results_text.insert(tk.END, f\"[{timestamp}] {message}\\n\")\n            self.results_text.see(tk.END)\n        \n        self.root.after(0, _log)\n    \n    def run(self):\n        \"\"\"Start the UI.\"\"\"\n        try:\n            self.root.mainloop()\n        except KeyboardInterrupt:\n            pass\n\ndef main():\n    \"\"\"Main entry point for desktop UI.\"\"\"\n    app = AITONRAGDesktopUI()\n    app.run()\n\nif __name__ == \"__main__\":\n    main()"
